                          BTTS (BlueTooth Test Suite)

What does BTTS do:

        1) Integrates several software services to simulate certain Bluetooth
           hardware devices (e.g. audio device, handsfree etc.)
        2) Provides set of stateful services to inspect/track the state of the
           simulated device and control it.
        3) Provides set of command line tools to talk to these services during
           test execution.


OVERVIEW

Test Executor directs the Tested Device to interact with the Bluetooth services
run on the BTTS Node and invokes BTTS Tools to execute and prove state changes
according to a given Test Definition.

                                                  +---------------+
                             +----------+         |   BTTS Node   |
     +----------             |          |   SSH   |               |
     |          |\           |   Test   | ----------> BTTS tools  |
     |Test       | <-------- | Executor |         |       |       |
     |Definition |           |          |         |       |       |
     |           |           +----------+         |       V       |
     +-----------+                |               | BTTS services |
                                  |               |       ^       |
                                  |               |       |       |
                                  |               |       V       |
                                  |               |    BT stack   |
                                  V               |       ^       |
                             +----------+         |       |       |
                             | Tested   |    BT   |       V       |
                             |  Device  | <---------> BT dongle   |
                             | (Phone)  |         |               |
                             +----------+         +---------------+


DEPLOYMENT

BTTS provides integration with Fedora 20. To simplify deployment it comes with
script to setup a libvirt managed virtual machine running Fedora 20 with all
necessary packages present.

Depending on your host setup, the minimal set of arguments might work for you.
(Run ./fedora/kickstart.sh --help for details.)

  (host)$ ./fedora/kickstart.sh <vendor-id>:<device-id> pool=default

Replace <vendor-id>:<device-id> with the ID pair of the USB Bluetooth device
you want to be made available to the virtual machine. More devices can be
specified as a comma separated list of ID pairs.

When installation is finished and the machine successfully rebooted, hit Ctrl-]
to leave the serial console and log in via SSH using the password you provided
during kickstart.sh execution. (Provided mDNS is setup on your host).

  (host)$ ssh btts@btts.local

Now install BTTS inside the virtual machine.

  (guest)$ git clone https://github.com/mer-qa/btts.git
  (guest)$ cd btts
  (guest)$ ./fedora/rebuildall.sh
      (Answer Yes to register local yum repository)
  (guest)$ ./fedora/reinstallall.sh
  (guest)$ sudo systemctl start btts.target


EXAMPLE TEST SESSION

Select adapter to work with

  (guest)$ btts config adapter hci0
  (guest)$ btts adapter powered true

Select remote device to work with

  (guest)$ btts config device de:ad:be:ef:de:ad
  (guest)$ btts device expect-available
  true

Initiate pairing

  (guest)$ btts pairing state
  initial
  (guest)$ btts pairing pair
  (guest)$ btts pairing state
  pairing

Confirm pairing

  (guest)$ btts agent active-call
  RequestConfirmationCall
      (Meanwhile confirm pairing on the device being tested)
  (guest)$ btts agent finish-active-call
  (guest)$ btts agent active-call
  NoCall
  (guest)$ btts pairing state
  succeeded
  (guest)$ btts device trusted true

Reset pairing tool to its initial state

  (guest)$ btts pairing reset
  (guest)$ btts pairing state
  initial

Enable A2DP profile

  (guest)$ btts a2dp enabled true
      (Now establish audio connection on the device being tested)

Set sample sound to test with

  (guest)$ btts a2dp set-sample < ./song.ogg

Record and match audio received via A2DP from the device being tested

  (guest)$ btts a2dp async-record-and-verify
      (Now start playing the song on the device being tested)
  (guest)$ btts a2dp async-record-and-verify-wait
  true
