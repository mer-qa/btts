#!/usr/bin/python3

import argparse
import dbus
import dbus.mainloop.glib
import sys

import btts
from   btts.cliutils import failure_on, bad_usage_on, error_handler

class CommandAdapter:
    '''\
    Get/Set adapter to work with.

    Device aliases can be defined in /etc/btts/adapters.  Content of this file
    is newline separated list of records.  Each record consists of a space
    separated pair of <bd_address> and <alias>. Lines starting with "#" are
    ignored.
    '''

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'adapter',
                help='Get/Set adapter to work with',
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self.__doc__)
        parser.add_argument(
                'adapter', nargs='?', type=str,
                help='Device name (e.g. "hci0") or alias (see above)')
        parser.set_defaults(handler=self)

    @failure_on([btts.AdapterManager.Error])
    @bad_usage_on([btts.AdapterManager.NoSuchAdapterError])
    def __call__(self, args):
        adapter_manager = btts.AdapterManager()

        if args.adapter == None:
            print(adapter_manager.get_adapter())
        else:
            adapter_manager.set_adapter(args.adapter)

class CommandPowered:
    '''\
    Get/Set adapter powered state.

    With no argument it prints "true" or "false" to indicate current adapter
    state.

    This is equivalent to access the org.bluez.Adapter1.Powered D-Bus property.
    '''

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'powered',
                help='Get/Set adapter powered state',
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self.__doc__)
        parser.add_argument('powered', nargs='?', type=btts.cliutils.boolean,
                            help='Device powered state (true|false)')
        parser.set_defaults(handler=self)


    @failure_on([btts.AdapterManager.Error])
    def __call__(self, args):
        adapter = btts.Adapter()

        if args.powered == None:
            print(["false", "true"][adapter.powered])
        else:
            adapter.powered = args.powered
            # TODO: wait for change

class CommandProfiles:
    '''\
    Get/Set active BT profiles.
    '''

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'profiles',
                help='Get/Set active BT profiles',
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self.__doc__)
        parser.add_argument(
                'action', choices=['list', 'enable', 'disable'],
                help='Command to execute on the selected profiles')
        # Workaround for http://bugs.python.org/issue9625
        def profile_name(string):
            if string not in btts.ProfileManager.valid_profile_names:
                raise TypeError
            return string
        parser.add_argument(
                'profile', nargs='*',
                type=profile_name,
                default=btts.ProfileManager.valid_profile_names,
                help='''Profile to operate on or all profiles if none is
                        given.  Valid profile names: %s''' %
                        (', '.join(btts.ProfileManager.valid_profile_names)))
        parser.set_defaults(handler=self)

    @failure_on([btts.ProfileManager.Error])
    @bad_usage_on([btts.ProfileManager.NoSuchProfileError])
    def __call__(self, args):
        profile_manager = btts.ProfileManager()

        if args.action == 'list':
            states = profile_manager.get_profiles_state()
            for profile in args.profile:
                state = states[profile]
                print("%s\t%s" % (profile, ['disabled', 'enabled'][state]))
        else:
            for profile in args.profile:
                profile_manager.enable_profile(profile, args.action == 'enable')

# Main argument parser
main_parser = argparse.ArgumentParser(
        prog='btts config',
        description='Bluetooth Test Suite configuration and management utility.')
subparsers = main_parser.add_subparsers(
        dest='subcommand', title='subcommands',
        help='''Valid subcommands. Pass "<subcommand> --help" to get more help
            on the given subcommand.''')

CommandAdapter(subparsers)
CommandPowered(subparsers)
CommandProfiles(subparsers)

args = main_parser.parse_args()
if not args.subcommand:
    main_parser.print_usage()
    sys.exit(1)

dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

with error_handler(main_parser):
    args.handler(args)
