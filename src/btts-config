#!/usr/bin/python3
#
# BTTS - BlueTooth Test Suite
#
# Copyright (C) 2014 Jolla Ltd.
# Contact: Martin Kampas <martin.kampas@jollamobile.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import dbus
import dbus.mainloop.glib
import sys

import btts
from   btts.cliutils import failure_on, bad_usage_on, error_handler

class CommandAdapter:
    '''\
    Get/Set adapter to work with.

    Device aliases can be defined in /etc/btts/adapters.  Content of this file
    is newline separated list of records.  Each record consists of a space
    separated pair of <bd_address> and <alias>. Lines starting with "#" are
    ignored.
    '''

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'adapter',
                help='Get/Set adapter to work with',
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self.__doc__)
        group = parser.add_mutually_exclusive_group()
        group.add_argument(
                '--raw-device', action='store_true',
                help='Print raw device name (e.g. "hci0"), do not resolve alias')
        group.add_argument(
                '--address', action='store_true',
                help='Print adapter address instead of device name or alias')
        group.add_argument(
                'adapter', nargs='?', type=str,
                help='Device name (e.g. "hci0") or alias (see above)')
        parser.set_defaults(handler=self)

    @failure_on([btts.Config.Error])
    @bad_usage_on([btts.Config.NoSuchAdapterError])
    def __call__(self, args):
        config = btts.Config()

        if args.adapter == None:
            if args.raw_device:
                print(config.get_adapter_no_alias())
            elif args.address:
                print(btts.Adapter().address)
            else:
                print(config.get_adapter())
        else:
            config.set_adapter(args.adapter)

class CommandHostAlias:
    '''\
    Get/Set name to be always used by the selected adapter.

    This is the same as to access the org.bluez.Adapter1.Alias bluez5 D-Bus API
    property of the adapter selected with the `adapter' command.

    Alias of the previously selected adapter will be automatically reset prior
    to setting alias to the newly selected adapter so there is (should be)
    always just one device with the given alias available on the network. Also
    the previously selected adapter is automaticaly powered off. The newly
    selected adapter's powered state is not touched.
    '''

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'host-alias',
                help='Get/Set name to be always used by the selected adapter',
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self.__doc__)
        parser.add_argument(
                'alias', nargs='?', type=str,
                help='Host alias. Pass empty string to reset adapter alias.')
        parser.set_defaults(handler=self)

    @failure_on([btts.Config.Error])
    def __call__(self, args):
        config = btts.Config()

        if args.alias == None:
            host_alias = config.get_host_alias()
            if host_alias:
                print(host_alias)
            else:
                print('<unset>')
        else:
            config.set_host_alias(args.alias)

class CommandDevice:
    '''\
    Get/Set the remote device to work with.
    '''

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'device',
                help='Get/Set the remote device to work with',
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self.__doc__)
        parser.add_argument(
                'device', nargs='?', type=str,
                help='Device address')
        parser.set_defaults(handler=self)

    @failure_on([btts.Config.Error])
    @bad_usage_on([btts.Config.InvalidAddressError])
    def __call__(self, args):
        config = btts.Config()

        if args.device == None:
            print(config.device_address)
        else:
            config.device_address = args.device

# Main argument parser
main_parser = argparse.ArgumentParser(
        prog='btts config',
        description='Bluetooth Test Suite configuration and management utility.')
subparsers = main_parser.add_subparsers(
        dest='subcommand', title='subcommands',
        help='''Valid subcommands. Pass "<subcommand> --help" to get more help
            on the given subcommand.''')

CommandAdapter(subparsers)
CommandHostAlias(subparsers)
CommandDevice(subparsers)

args = main_parser.parse_args()
if not args.subcommand:
    main_parser.print_usage()
    sys.exit(1)

dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

with error_handler(main_parser):
    args.handler(args)
