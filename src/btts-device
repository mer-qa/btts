#!/usr/bin/python3
#
# BTTS - BlueTooth Test Suite
#
# Copyright (C) 2014 Jolla Ltd.
# Contact: Martin Kampas <martin.kampas@jollamobile.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import dbus
import dbus.mainloop.glib
from   gi.repository import GObject
import logging
import sys
import textwrap

# From bluez's tests
import bluezutils

import btts
from   btts.cliutils import failure_on, bad_usage_on, error_handler

log = logging.getLogger(__name__)

class CommandExpectAvailable:
    _doc = textwrap.dedent('''\
    Expect the remote device to be(come) available.

    Can be used e.g. to (1) test availability of the remote device or to (2)
    rediscover the device after it was removed with `remove' command in order to
    unpair it.
    ''')

    _REASONABLE_TIMEOUT = 20000 # [ms]
    _NUMBER_TRIES = 3

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'expect-available',
                help=self._doc.splitlines()[0],
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self._doc)
        parser.set_defaults(handler=self)

    @failure_on([btts.Config.Error])
    def __call__(self, args):
        adapter = btts.Adapter()
        device = btts.Device()

        was_available = device.available

        for i in range(0, self._NUMBER_TRIES):
            adapter.scan()

            if not was_available and device.available:
                break

            loop = GObject.MainLoop()
            device.available_changed.connect(
                    lambda available: not available or loop.quit())
            GObject.timeout_add(self._REASONABLE_TIMEOUT, loop.quit)
            loop.run()

            if device.available:
                break

        print(['false', 'true'][device.available])

class CommandExpectUnavailable:
    _doc = textwrap.dedent('''\
    Expect the remote device to be(come) unavailable.

    The way it works is trivial - it removes the device and then performs scan,
    expecting it to not become available again.
    ''')

    _REASONABLE_TIMEOUT = 10000 # [ms]
    _NUMBER_TRIES = 2

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'expect-unavailable',
                help=self._doc.splitlines()[0],
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self._doc)
        parser.set_defaults(handler=self)

    @failure_on([btts.Config.Error])
    def __call__(self, args):
        adapter = btts.Adapter()
        device = btts.Device()

        try:
            device.remove()
        except btts.Device.DeviceNotAvailableError:
            pass

        for i in range(0, self._NUMBER_TRIES):
            adapter.scan()

            loop = GObject.MainLoop()
            device.available_changed.connect(
                    lambda available: available or loop.quit())
            GObject.timeout_add(self._REASONABLE_TIMEOUT, loop.quit)
            loop.run()

        print(['false', 'true'][not device.available])

class CommandTrust:
    _doc = textwrap.dedent('''\
    Get/Set the device as trusted

    See org.bluez.Device1.Trusted property in bluez5 D-Bus API documentation.
    ''')

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'trusted',
                help=self._doc.splitlines()[0],
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self._doc)
        parser.add_argument('trusted', nargs='?', type=btts.cliutils.boolean,
                            help='Device trusted state (true|false)')
        parser.set_defaults(handler=self)

    @failure_on([btts.Config.Error, btts.Device.Error])
    def __call__(self, args):
        device = btts.Device()

        if args.trusted == None:
            print(["false", "true"][device.trusted])
        else:
            device.trusted = args.trusted
            # TODO: wait for change

class CommandRemove:
    _doc = textwrap.dedent('''\
    Remove the remote device and associated pairing information.

    Main use is to unpair the device. The device can be then rediscovered with
    the `inquiry' command.

    See org.bluez.Adapter1.RemoveDevice() in bluez5 D-Bus API documentation.
    ''')

    _REASONABLE_TIMEOUT = 5000 # [ms]

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'remove',
                help=self._doc.splitlines()[0],
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self._doc)
        parser.set_defaults(handler=self)

    @failure_on([btts.Config.Error])
    def __call__(self, args):
        device = btts.Device()

        try:
            device.remove()
        except btts.Device.DeviceNotAvailableError:
            log.warning('Device already removed. Nothing to do.')
            return

        loop = GObject.MainLoop()
        device.available_changed.connect(lambda x: loop.quit())
        GObject.timeout_add(self._REASONABLE_TIMEOUT, loop.quit)
        loop.run()

        if device.available:
            raise btts.cliutils.Failure('Device was not removed')

# Main argument parser
description='''\
Remote Bluetooth device management utility'''

main_parser = btts.cliutils.ArgumentParser(
        prog='device',
        description=description,
        add_server_option=True,
        subcommands=[
                CommandExpectAvailable,
                CommandExpectUnavailable,
                CommandTrust,
                CommandRemove,
            ])

args = main_parser.parse_args()
if not args.subcommand:
    main_parser.print_usage()
    sys.exit(1)

dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

with error_handler(main_parser):
    args.handler(args)
