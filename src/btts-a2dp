#!/usr/bin/python3
#
# BTTS - BlueTooth Test Suite
#
# Copyright (C) 2014 Jolla Ltd.
# Contact: Martin Kampas <martin.kampas@jollamobile.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import dbus
import dbus.mainloop.glib
from   gi.repository import GObject
import sys
import textwrap

import btts
from   btts.cliutils import failure_on, bad_usage_on, error_handler
from   btts.utils import dbus_service_method, dbus_service_signal

SAMPLE_PATH = '/tmp/btts-a2dp-sample'
SAMPLE_CODE_PATH = '/tmp/btts-a2dp-sample.code'
SAMPLE_MAX_SIZE = 50 << 20 # Bytes
MATCHED_PATH = '/tmp/btts-a2dp-match.wav'

SERVER_BUS_NAME = 'org.merproject.btts.A2dpTool'
SERVER_PATH = '/org/merproject/btts/A2dpTool'
SERVER_INTERFACE = 'org.merproject.btts.A2dpTool'

REASONABLE_RECORD_START_PADDING = 30 # seconds; keep in sync with doc

class Server(dbus.service.Object):
    def __init__(self, bus, path):
        dbus.service.Object.__init__(self, bus, path)
        self._recorder = btts.Recorder()

    @dbus_service_method(SERVER_INTERFACE,
                         in_signature="i", out_signature="")
    def StartRecord(self, duration):
        self._recorder.start(MATCHED_PATH, 'a2dp', duration,
                             REASONABLE_RECORD_START_PADDING)

    @dbus_service_method(SERVER_INTERFACE,
                         in_signature="", out_signature="")
    def WaitRecord(self):
        self._recorder.wait()

class CommandEnabled:
    _doc = textwrap.dedent('''\
    Get/Set profile enabled state.

    With no argument it prints "true" or "false" to indicate current state.
    ''')

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'enabled',
                help=self._doc.splitlines()[0],
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self._doc)
        parser.add_argument(
                'enabled', nargs='?', type=btts.cliutils.boolean,
                help='Profile enabled state (true|false)')
        parser.set_defaults(handler=self)

    @failure_on([btts.Config.Error])
    def __call__(self, server, args):
        config = btts.Config()

        if args.enabled == None:
            state = config.profile_enabled('a2dp')
            print(['false', 'true'][state])
        else:
            config.set_profile_enabled('a2dp', args.enabled)

class CommandReceivingAudio:
    _doc = textwrap.dedent('''\
    Test if receiving audio right now.

    It prints "true" or "false" to indicate current state.
    ''')

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'receiving-audio',
                help=self._doc.splitlines()[0],
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self._doc)
        parser.set_defaults(handler=self)

    @failure_on([btts.Config.Error])
    def __call__(self, server, args):
        print(['false', 'true'][btts.Recorder.receiving_audio()])

class CommandSetSample:
    _doc = textwrap.dedent('''\
    Set sample to match the recorded/played audio against.

    The audio sample is read from stdin.
    ''')

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'set-sample',
                help=self._doc.splitlines()[0],
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self._doc)
        parser.set_defaults(handler=self)

    def __call__(self, server, args):
        with open(SAMPLE_PATH, 'wb') as sample_file:
            btts.utils.sendfile(sample_file, sys.stdin.buffer, SAMPLE_MAX_SIZE)

        code = btts.Echonest.codegen(SAMPLE_PATH)
        with open(SAMPLE_CODE_PATH, 'w') as sample_code_file:
            sample_code_file.write(code)

class CommandAsyncRecordAndVerify:
    _doc = textwrap.dedent('''\
    Asynchronously record and match audio against the stored sample.

    It will try to record exactly `duration' seconds of received audio data
    within `duration' + 30 seconds and then match it against the sample stored
    with `set-sample` command.

    Use `async-record-and-verify-wait` to query the result.
    ''')

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'async-record-and-verify',
                help=self._doc.splitlines()[0],
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self._doc)
        parser.add_argument('duration', nargs='?', type=int, default=20,
                            help='Record duration [secs]')
        parser.set_defaults(handler=self)

    @failure_on([btts.Recorder.Error])
    def __call__(self, server, args):
        server.StartRecord(args.duration)

class CommandAsyncRecordAndVerifyWait:
    _doc = textwrap.dedent('''\
    Wait for async-record-and-verify to complete and print its result.

    This command blocks until the asynchronous procedure started with
    `async-record-and-verify` finishes and prints its result.

    Prints "true" or "false" to indicate if the recorded audio matches the
    stored sample.

    Exits with non zero when audio of the given duration cannot be recorded.
    ''')

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'async-record-and-verify-wait',
                help=self._doc.splitlines()[0],
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self._doc)
        parser.set_defaults(handler=self)

    @failure_on([btts.Recorder.Error])
    def __call__(self, server, args):
        server.WaitRecord()

        with open(SAMPLE_CODE_PATH, 'r') as sample_code_file:
            sample_code = sample_code_file.read()

        code = btts.Echonest.codegen(MATCHED_PATH)

        ok = btts.Echonest.match_code_string(wanted=sample_code,
                                             tested=code)
        print(['false', 'true'][ok])

class CommandRecordAndVerify:
    _doc = textwrap.dedent('''\
    Record and match audio against the stored sample.

    It will try to record exactly `duration' seconds of received audio data
    within `duration' + 30 seconds and then match it against the sample stored
    with `set-sample` command.

    Prints "true" or "false" to indicate if the recorded audio matches the
    stored sample.

    Exits with non zero when audio of the given duration cannot be recorded.

    DEBUGGING:
        The following paths can be examined for debugging purposes:
            - %(match)s - The recorded sample
    ''' % {
            'match': MATCHED_PATH,
        })

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'record-and-verify',
                help=self._doc.splitlines()[0],
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self._doc)
        parser.add_argument('duration', nargs='?', type=int, default=20,
                            help='Record duration [secs]')
        parser.set_defaults(handler=self)

    @failure_on([btts.Recorder.Error])
    def __call__(self, server, args):
        recorder = btts.Recorder()
        recorder.start(MATCHED_PATH, 'a2dp', args.duration,
                       REASONABLE_RECORD_START_PADDING)
        recorder.wait()

        with open(SAMPLE_CODE_PATH, 'r') as sample_code_file:
            sample_code = sample_code_file.read()

        code = btts.Echonest.codegen(MATCHED_PATH)

        ok = btts.Echonest.match_code_string(wanted=sample_code,
                                             tested=code)
        print(['false', 'true'][ok])

class CommandVerify:
    _doc = textwrap.dedent('''\
    Match audio against the stored sample.

    The audio data is read from stdin.

    Prints "true" or "false" to indicate the result.
    ''')

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'verify',
                help=self._doc.splitlines()[0],
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self._doc)
        parser.set_defaults(handler=self)

    def __call__(self, server, args):
        with open(MATCHED_PATH, 'wb') as matched_file:
            btts.utils.sendfile(matched_file, sys.stdin.buffer, SAMPLE_MAX_SIZE)

        with open(SAMPLE_CODE_PATH, 'r') as sample_code_file:
            sample_code = sample_code_file.read()

        code = btts.Echonest.codegen(MATCHED_PATH)

        ok = btts.Echonest.match_code_string(wanted=sample_code,
                                             tested=code)
        print(['false', 'true'][ok])

# Main argument parser
description='''\
Advanced Audio Distribution Profile controlling utility.'''

main_parser = btts.cliutils.ArgumentParser(
        prog='a2dp',
        description=description,
        add_server_option=True,
        subcommands=[
                CommandEnabled,
                CommandReceivingAudio,
                CommandSetSample,
                CommandAsyncRecordAndVerify,
                CommandAsyncRecordAndVerifyWait,
                CommandRecordAndVerify,
                CommandVerify,
            ])

dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
bus = dbus.SystemBus()

if '--server' in sys.argv:
    if len(sys.argv) > 2:
        main_parser.error('Unexpected argument')

    mainloop = GObject.MainLoop()

    name = dbus.service.BusName(SERVER_BUS_NAME, bus)
    server = Server(bus, SERVER_PATH)

    # TODO: signal handling
    #signal.signal(signal.SIGINT,
    #		lambda *args: gobject.idle_add(mainloop.quit))
    #signal.signal(signal.SIGTERM,
    #		lambda *args: gobject.idle_add(mainloop.quit))

    mainloop.run()
else:
    args = main_parser.parse_args()
    if not args.subcommand:
        main_parser.print_usage()
        sys.exit(1)

    server_object = bus.get_object(SERVER_BUS_NAME, SERVER_PATH)
    server = dbus.Interface(server_object, SERVER_INTERFACE)

    with error_handler(main_parser):
        args.handler(server, args)
