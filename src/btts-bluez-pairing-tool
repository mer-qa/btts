#!/usr/bin/python2

from __future__ import absolute_import, print_function, unicode_literals

from gi.repository import GObject

import sys
import signal
import argparse
import dbus
import dbus.service
import dbus.mainloop.glib

# From bluez's tests
import bluezutils

import btts
from btts.utils import dbus_service_method

TOOL_BUS_NAME = 'org.merproject.btts.BluezPairingTool'
TOOL_PATH = '/org/merproject/btts/BluezPairingTool'
TOOL_INTERFACE = 'org.merproject.btts.BluezPairingTool'

bus = None

def set_trusted(path):
	props = dbus.Interface(bus.get_object("org.bluez", path),
			       "org.freedesktop.DBus.Properties")
	props.Set("org.bluez.Device1", "Trusted", True)

def dev_connect(path):
	dev = dbus.Interface(bus.get_object("org.bluez", path),
			     "org.bluez.Device1")
	dev.Connect()

class PairingTool(dbus.service.Object):
	class State:
		Initial = "initial"
		Pairing = "pairing"
		Succeeded = "succeeded"
		Failed = "failed"
		Cancelling = "cancelling"
		Cancelled = "cancelled"
		CancelFailed = "cancel-failed"

	def __init__(self, bus, path):
		dbus.service.Object.__init__(self, bus, path)
		self.state = self.State.Initial

	#------------------------------------------------------------
	@dbus_service_method(TOOL_INTERFACE,
			     in_signature="s", out_signature="")
	def Pair(self, hw_address):
		assert self.state == self.State.Initial

		adapter = btts.AdapterManager().get_adapter_no_alias()
		self.device = bluezutils.find_device(hw_address.upper(), adapter)
		self.device_path = self.device.object_path

		self.device.Pair(reply_handler=self.pair_reply,
				 error_handler=self.pair_error, timeout=60000)
		self.state = self.State.Pairing

	def pair_reply(self):
		assert self.state == self.State.Pairing

		self.state = self.State.Succeeded

	def pair_error(self, error):
		assert self.state == self.State.Pairing

		self.state = self.State.Failed

		self.error = error.get_dbus_name()
		if self.error == "org.freedesktop.DBus.Error.NoReply" and self.device:
			print("Timed out. Cancelling pairing")
			self.device.CancelPairing()

	#------------------------------------------------------------
	@dbus_service_method(TOOL_INTERFACE,
			     in_signature="", out_signature="")
	def Cancel(self):
		assert self.state == self.State.Pairing

		self.device.CancelPairing(reply_handler=self.cancel_reply,
					  error_handler=self.cancel_error,
					  timeout=60000)

	def cancel_reply(self):
		assert self.state == self.State.Cancelling

		self.state = self.State.Cancelled

	def cancel_error(self, error):
		assert self.state == self.State.Cancelling

		self.state = self.State.CancelFailed
		self.error = error.get_dbus_name()

	#------------------------------------------------------------
	@dbus_service_method(TOOL_INTERFACE,
			     in_signature="", out_signature="s")
	def GetState(self):
		return self.state

	#------------------------------------------------------------
	@dbus_service_method(TOOL_INTERFACE,
			     in_signature="", out_signature="s")
	def GetError(self):
		if self.error:
			return self.error
		else:
			return "No error"

	#------------------------------------------------------------
	@dbus_service_method(TOOL_INTERFACE,
			     in_signature="", out_signature="")
	def Reset(self):
		assert (self.state == self.State.Succeeded or
			self.state == self.State.Failed or
			self.state == self.State.Cancelled or
			self.state == self.State.CancelFailed)

		self.state = self.State.Initial
		self.error = None
		self.device = None
		self.device_path = None

class CommandPair:
	'''\
	Initiate pairing.

	See org.bluez.Device1.Pair() in the bluez5 D-Bus API documentation.
	'''

	def __init__(self, subparsers):
		parser = subparsers.add_parser(
				'pair',
				help='Initiate pairing',
				formatter_class=argparse.RawDescriptionHelpFormatter,
				description=self.__doc__)
		parser.add_argument('address', type=str,
				    help='Address of the device to pair with')
		parser.set_defaults(handler=self)

	def __call__(self, tool, args):
		tool.Pair(args.address)

class CommandCancel:
	'''\
	Cancel pairing.

	See org.bluez.Device1.CancelPairing() in the bluez5 D-Bus API documentation.
	'''

	def __init__(self, subparsers):
		parser = subparsers.add_parser(
				'cancel',
				help='Cancel pairing',
				formatter_class=argparse.RawDescriptionHelpFormatter,
				description=self.__doc__)
		parser.set_defaults(handler=self)

	def __call__(self, tool, args):
		tool.Cancel()

class CommandState:
	'''\
	Get state.

	Possible states:

		initial        tool is in its initial state
		pairing        pairing operation in progress
		succeeded      pairing successfully finished
		failed         pairing failed
		cancelling     cancel operation in progress
		cancelled      cancel operation successfully finished
		cancel-failed  cancel operation failed
	'''

	def __init__(self, subparsers):
		parser = subparsers.add_parser(
				'state',
				help='Get state',
				formatter_class=argparse.RawDescriptionHelpFormatter,
				description=self.__doc__)
		parser.set_defaults(handler=self)

	def __call__(self, tool, args):
		print(tool.GetState())

class CommandErrorName:
	'''\
	Get the last received D-Bus error name.

	Until in "Failed" or "CancelFailed" state, it returns the string "No error"
	'''

	def __init__(self, subparsers):
		parser = subparsers.add_parser(
				'error-name',
				help='Get the last received D-Bus error name',
				formatter_class=argparse.RawDescriptionHelpFormatter,
				description=self.__doc__)
		parser.set_defaults(handler=self)

	def __call__(self, tool, args):
		print(tool.GetError())


class CommandReset:
	'''\
	Reset the tool to its initial state.
	'''

	def __init__(self, subparsers):
		parser = subparsers.add_parser(
				'reset',
				help='Reset the tool to its initial state',
				formatter_class=argparse.RawDescriptionHelpFormatter,
				description=self.__doc__)
		parser.set_defaults(handler=self)

	def __call__(self, tool, args):
		tool.Reset()


if __name__ == '__main__':
	dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

	bus = dbus.SystemBus()

	parser = argparse.ArgumentParser(
			prog='btts bluez-pairing-tool',
			formatter_class=argparse.RawDescriptionHelpFormatter,
			description='''\
Bluez pairing tool with non-interactive command line user interface.

It consists of a background service and a client process providing user
interface. Pass `--server' option to run the background service instead of user
interface.

''')
	subparsers = parser.add_subparsers(
			dest='subcommand', title='subcommands',
			help='''Valid subcommands. Pass "<subcommand> --help" to get
				more help on the given subcommand.''')

	CommandPair(subparsers)
	CommandCancel(subparsers)
	CommandState(subparsers)
	CommandErrorName(subparsers)
	CommandReset(subparsers)

	parser.usage = '%(prog)s --server\n' + parser.format_usage()

	if '--server' in sys.argv:
		if len(sys.argv) > 2:
			parser.error('Unexpected argument')

		mainloop = GObject.MainLoop()

		name = dbus.service.BusName(TOOL_BUS_NAME, bus)
		tool = PairingTool(bus, TOOL_PATH)
		print("Pairing tool registered")

		# TODO: signal handling
		#signal.signal(signal.SIGINT,
		#		lambda *args: GObject.idle_add(mainloop.quit))
		#signal.signal(signal.SIGTERM,
		#		lambda *args: GObject.idle_add(mainloop.quit))

		mainloop.run()
	else:
		args = parser.parse_args()
		tool_object = bus.get_object(TOOL_BUS_NAME, TOOL_PATH)
		tool = dbus.Interface(tool_object, TOOL_INTERFACE)
		args.handler(tool, args)
