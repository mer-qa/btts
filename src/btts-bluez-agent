#!/usr/bin/python2
#
# BTTS - BlueTooth Test Suite
#
# Copyright (C) 2014 Jolla Ltd.
# Contact: Martin Kampas <martin.kampas@jollamobile.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import absolute_import, print_function, unicode_literals

from gi.repository import GObject

import sys
import signal
import dbus
import dbus.service
import dbus.mainloop.glib
from optparse import OptionParser

# From bluez's tests
import bluezutils

from btts_utils import dbus_service_method

BUS_NAME = 'org.bluez'
AGENT_INTERFACE = 'org.bluez.Agent1'

AGENT_BUS_NAME = 'org.nemomobile.btts.BluezAgent'
AGENT_PATH = "/org/nemomobile/btts/BluezAgent"
AGENT_TEST_INTERFACE = 'org.nemomobile.btts.BluezAgent'

bus = None
device_obj = None
dev_path = None

def set_trusted(path):
	props = dbus.Interface(bus.get_object("org.bluez", path),
			       "org.freedesktop.DBus.Properties")
	props.Set("org.bluez.Device1", "Trusted", True)

def dev_connect(path):
	dev = dbus.Interface(bus.get_object("org.bluez", path),
			     "org.bluez.Device1")
	dev.Connect()

class Canceled(dbus.DBusException):
	_dbus_error_name = "org.bluez.Error.Canceled"

class Rejected(dbus.DBusException):
	_dbus_error_name = "org.bluez.Error.Rejected"

class ActiveCall(dbus.service.Object):
	def __init__(self, reply_handler, error_handler):
		self.reply_handler = reply_handler
		self.error_handler = error_handler

	def name(self):
		return self.__class__.__name__

	def finish(self, reply=None):
		pass

	def reject(self):
		assert self.error_handler
		self.error_handler(Rejected("Rejected by user"))

	def cancel(self):
		assert self.error_handler
		self.error_handler(Canceled("Canceled by user"))

class NoCall(ActiveCall):
	def __init__(self):
		ActiveCall.__init__(self, None, None)

class RequestPinCodeCall(ActiveCall):
	def __init__(self, device, reply_handler, error_handler):
		ActiveCall.__init__(self, reply_handler, error_handler)
		self.arg_device = device

	def finish(self, reply):
		assert reply
		pin_code = reply
		self.reply_handler(pin_code)

class DisplayPinCodeCall(ActiveCall):
	def __init__(self, device, pin_code, reply_handler, error_handler):
		ActiveCall.__init__(self, reply_handler, error_handler)
		self.arg_device = device
		self.arg_pin_code = pin_code

	def finish(self, reply):
		assert not reply
		self.reply_handler()

class RequestPasskeyCall(ActiveCall):
	def __init__(self, device, reply_handler, error_handler):
		ActiveCall.__init__(self, reply_handler, error_handler)
		self.arg_device = device

	def finish(self, reply):
		assert reply
		passkey = reply
		self.reply_handler(dbus.UInt32(passkey))

class RequestConfirmationCall(ActiveCall):
	def __init__(self, device, passkey, reply_handler, error_handler):
		ActiveCall.__init__(self, reply_handler, error_handler)
		self.arg_device = device
		self.arg_passkey = passkey

	def finish(self, reply):
		assert not reply
		self.reply_handler()

class RequestAuthorizationCall(ActiveCall):
	def __init__(self, device, reply_handler, error_handler):
		ActiveCall.__init__(self, reply_handler, error_handler)
		self.arg_device = device

	def finish(self, reply):
		assert not reply
		self.reply_handler()

class AuthorizeServiceCall(ActiveCall):
	def __init__(self, device, uuid, reply_handler, error_handler):
		ActiveCall.__init__(self, reply_handler, error_handler)
		self.arg_device = device
		selg.arg_uuid = uuid

	def finish(self, reply):
		assert not reply
		self.reply_handler()

class CancelCall(ActiveCall):
	def __init__(self, reply_handler, error_handler):
		ActiveCall.__init__(self, reply_handler, error_handler)

	def finish(self, reply):
		print("reply '%s'" % (reply))
		assert not reply
		self.reply_handler()

class State:
	released = False
	passkey_displayed = (0, 0)
	_active_call = NoCall()

	@property
	def active_call(self):
		return self._active_call

	@active_call.setter
	def active_call(self, call):
		assert (isinstance(self._active_call, NoCall) or
			isinstance(call, NoCall))
		self._active_call = call

class Agent(dbus.service.Object):
	state = State()
	capability = "KeyboardDisplay"

	def __init__(self, bus, path):
		dbus.service.Object.__init__(self, bus, path)
		obj = bus.get_object(BUS_NAME, "/org/bluez")
		self.manager = dbus.Interface(obj, "org.bluez.AgentManager1")
		self.manager.RegisterAgent(self.__dbus_object_path__, self.capability)
		self.manager.RequestDefaultAgent(self.__dbus_object_path__)


	#------------------------------------------------------------
	@dbus_service_method(AGENT_INTERFACE,
			     in_signature="", out_signature="")
	def Release(self):
		print("AGENT_INTERFACE.Release ()")
		self.state.released = True

	#------------------------------------------------------------
	@dbus_service_method(AGENT_INTERFACE,
			     in_signature="o", out_signature="s",
			     async_callbacks=('reply_handler', 'error_handler'))
	def RequestPinCode(self, device, reply_handler, error_handler):
		print("AGENT_INTERFACE.RequestPinCode (%s)" % (device))
		self.state.active_call = RequestPinCodeCall(device,
							    reply_handler,
							    error_handler)

	#------------------------------------------------------------
	@dbus_service_method(AGENT_INTERFACE,
			     in_signature="os", out_signature="",
			     async_callbacks=('reply_handler', 'error_handler'))
	def DisplayPinCode(self, device, pincode, reply_handler,
			   error_handler):
		print("AGENT_INTERFACE.DisplayPinCode (%s, %s)" % (device, pincode))
		self.state.active_call = DisplayPinCodeCall(device, pincode,
							    reply_handler,
							    error_handler)

	#------------------------------------------------------------
	@dbus_service_method(AGENT_INTERFACE,
			     in_signature="o", out_signature="u",
			     async_callbacks=('reply_handler', 'error_handler'))
	def RequestPasskey(self, device, reply_handler, error_handler):
		print("AGENT_INTERFACE.RequestPasskey (%s)" % (device))
		self.state.active_call = RequestPasskeyCall(device,
							    reply_handler,
							    error_handler)

	#------------------------------------------------------------
	@dbus_service_method(AGENT_INTERFACE,
			     in_signature="ouq", out_signature="")
	def DisplayPasskey(self, device, passkey, entered):
		print("AGENT_INTERFACE.DisplayPasskey (%s, %06u entered %u)" %
		      (device, passkey, entered))
		self.state.passkey_displayed = (passkey, entered)

	#------------------------------------------------------------
	@dbus_service_method(AGENT_INTERFACE,
			     in_signature="ou", out_signature="",
			     async_callbacks=('reply_handler', 'error_handler'))
	def RequestConfirmation(self, device, passkey, reply_handler,
			error_handler):
		print("AGENT_INTERFACE.RequestConfirmation (%s, %06d)" % (device, passkey))
		self.state.active_call = RequestConfirmationCall(device,
								 passkey,
								 reply_handler,
								 error_handler)

	#------------------------------------------------------------
	@dbus_service_method(AGENT_INTERFACE,
			     in_signature="o", out_signature="",
			     async_callbacks=('reply_handler', 'error_handler'))
	def RequestAuthorization(self, device, reply_handler, error_handler):
		print("AGENT_INTERFACE.RequestAuthorization (%s)" % (device))
		self.state.active_call = RequestAuthorizationCall(device,
								  reply_handler,
								  error_handler)

	#------------------------------------------------------------
	@dbus_service_method(AGENT_INTERFACE,
			     in_signature="os", out_signature="",
			     async_callbacks=('reply_handler', 'error_handler'))
	def AuthorizeService(self, device, uuid, reply_handler, error_handler):
		print("AGENT_INTERFACE.AuthorizeService (%s, %s)" % (device, uuid))
		self.state.active_call = AuthorizeServiceCall(device, uuid,
							      reply_handler,
							      error_handler)

	#------------------------------------------------------------
	@dbus_service_method(AGENT_INTERFACE,
			     in_signature="", out_signature="",
			     async_callbacks=('reply_handler', 'error_handler'))
	def Cancel(self, reply_handler, error_handler):
		print("AGENT_INTERFACE.Cancel ()")
		self.state.active_call = NoCall()
		self.state.passkey_displayed = (0, 0)
		self.state.active_call = CancelCall(reply_handler, error_handler)

	#------------------------------------------------------------
	@dbus_service_method(AGENT_TEST_INTERFACE,
			     in_signature="", out_signature="i")
	def IsReleased(self):
		print("AGENT_TEST_INTERFACE.IsReleased ()")
		return self.state.active_call.released

	#------------------------------------------------------------
	@dbus_service_method(AGENT_TEST_INTERFACE,
			     in_signature="", out_signature="(ii)")
	def GetPasskeyDisplayed(self):
		print("AGENT_TEST_INTERFACE.PasskeyDisplayed ()")
		return self.state.active_call.passkey_displayed

	#------------------------------------------------------------
	@dbus_service_method(AGENT_TEST_INTERFACE,
			     in_signature="", out_signature="s")
	def GetActiveCall(self):
		print("AGENT_TEST_INTERFACE.ActiveCall ()")
		return self.state.active_call.name()

	#------------------------------------------------------------
	@dbus_service_method(AGENT_TEST_INTERFACE,
			     in_signature="s", out_signature="")
	def FinishActiveCall(self, reply):
		print("AGENT_TEST_INTERFACE.FinishActiveCall ()")
		self.state.active_call.finish(reply)
		self.state.active_call = NoCall()

	#------------------------------------------------------------
	@dbus_service_method(AGENT_TEST_INTERFACE,
			     in_signature="", out_signature="")
	def RejectActiveCall(self):
		print("AGENT_TEST_INTERFACE.RejectActiveCall ()")
		self.state.active_call.reject()
		self.state.active_call = NoCall()

	#------------------------------------------------------------
	@dbus_service_method(AGENT_TEST_INTERFACE,
			     in_signature="", out_signature="")
	def CancelActiveCall(self):
		print("AGENT_TEST_INTERFACE.CancelActiveCall ()")
		self.state.active_call.cancel()
		self.state.active_call = NoCall()

	#------------------------------------------------------------
	@dbus_service_method(AGENT_TEST_INTERFACE,
			     in_signature="", out_signature="s")
	def GetCapability(self):
		print("AGENT_TEST_INTERFACE.Capability ()")

	#------------------------------------------------------------
	@dbus_service_method(AGENT_TEST_INTERFACE,
			     in_signature="s", out_signature="")
	def SetCapability(self, capability):
		print("AGENT_TEST_INTERFACE.SetCapability (%s)" % (capability))
		self.capability = capability
		self.manager.UnregisterAgent(self.__dbus_object_path__)
		self.manager.RegisterAgent(self.__dbus_object_path__, self.capability)
		self.manager.RequestDefaultAgent(self.__dbus_object_path__)

if __name__ == '__main__':
	dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

	bus = dbus.SystemBus()

	parser = OptionParser()
	parser.add_option("-m", "--mode", action="store",
					type="string",
					dest="mode",
					default="client")
	parser.add_option("-i", "--adapter", action="store",
					type="string",
					dest="adapter_pattern",
					default=None)
	(options, args) = parser.parse_args()

	if options.mode == "server":
		mainloop = GObject.MainLoop()

		name = dbus.service.BusName(AGENT_BUS_NAME, bus)
		agent = Agent(bus, AGENT_PATH)
		print("Agent registered")

		# TODO: signal handling
		#signal.signal(signal.SIGINT,
		#		lambda *args: gobject.idle_add(mainloop.quit))
		#signal.signal(signal.SIGTERM,
		#		lambda *args: gobject.idle_add(mainloop.quit))

		mainloop.run()

		#adapter.UnregisterAgent(path)
		#print("Agent unregistered")
	else:
		agent_object = bus.get_object(AGENT_BUS_NAME, AGENT_PATH)
		agent = dbus.Interface(agent_object, AGENT_TEST_INTERFACE)
		retv = getattr(agent, args[0])(*args[1:])
		print(retv)
