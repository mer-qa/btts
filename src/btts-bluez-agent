#!/usr/bin/python2
#
# BTTS - BlueTooth Test Suite
#
# Copyright (C) 2014 Jolla Ltd.
# Contact: Martin Kampas <martin.kampas@jollamobile.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import absolute_import, print_function, unicode_literals

from gi.repository import GObject

import sys
import signal
import argparse
import dbus
import dbus.service
import dbus.mainloop.glib

import btts
from btts.utils import dbus_service_method, dbus_service_signal

BUS_NAME = 'org.bluez'
AGENT_INTERFACE = 'org.bluez.Agent1'

AGENT_BUS_NAME = 'org.merproject.btts.BluezAgent'
AGENT_PATH = "/org/merproject/btts/BluezAgent"
AGENT_TEST_INTERFACE = 'org.merproject.btts.BluezAgent'

bus = None
device_obj = None
dev_path = None

def set_trusted(path):
	props = dbus.Interface(bus.get_object("org.bluez", path),
			       "org.freedesktop.DBus.Properties")
	props.Set("org.bluez.Device1", "Trusted", True)

def dev_connect(path):
	dev = dbus.Interface(bus.get_object("org.bluez", path),
			     "org.bluez.Device1")
	dev.Connect()

class Canceled(dbus.DBusException):
	_dbus_error_name = "org.bluez.Error.Canceled"

class Rejected(dbus.DBusException):
	_dbus_error_name = "org.bluez.Error.Rejected"

class ActiveCall(dbus.service.Object):
	def __init__(self, reply_handler, error_handler):
		self.reply_handler = reply_handler
		self.error_handler = error_handler

	def name(self):
		return self.__class__.__name__

	def finish(self, reply=None):
		pass

	def reject(self):
		assert self.error_handler
		self.error_handler(Rejected("Rejected by user"))

	def cancel(self):
		assert self.error_handler
		self.error_handler(Canceled("Canceled by user"))

class NoCall(ActiveCall):
	def __init__(self):
		ActiveCall.__init__(self, None, None)

class RequestPinCodeCall(ActiveCall):
	def __init__(self, device, reply_handler, error_handler):
		ActiveCall.__init__(self, reply_handler, error_handler)
		self.arg_device = device

	def finish(self, reply):
		assert reply
		pin_code = reply
		self.reply_handler(pin_code)

class DisplayPinCodeCall(ActiveCall):
	def __init__(self, device, pin_code, reply_handler, error_handler):
		ActiveCall.__init__(self, reply_handler, error_handler)
		self.arg_device = device
		self.arg_pin_code = pin_code

	def finish(self, reply):
		assert not reply
		self.reply_handler()

class RequestPasskeyCall(ActiveCall):
	def __init__(self, device, reply_handler, error_handler):
		ActiveCall.__init__(self, reply_handler, error_handler)
		self.arg_device = device

	def finish(self, reply):
		assert reply
		passkey = reply
		self.reply_handler(dbus.UInt32(passkey))

class RequestConfirmationCall(ActiveCall):
	def __init__(self, device, passkey, reply_handler, error_handler):
		ActiveCall.__init__(self, reply_handler, error_handler)
		self.arg_device = device
		self.arg_passkey = passkey

	def finish(self, reply):
		assert not reply
		self.reply_handler()

class RequestAuthorizationCall(ActiveCall):
	def __init__(self, device, reply_handler, error_handler):
		ActiveCall.__init__(self, reply_handler, error_handler)
		self.arg_device = device

	def finish(self, reply):
		assert not reply
		self.reply_handler()

class AuthorizeServiceCall(ActiveCall):
	def __init__(self, device, uuid, reply_handler, error_handler):
		ActiveCall.__init__(self, reply_handler, error_handler)
		self.arg_device = device
		self.arg_uuid = uuid

	def finish(self, reply):
		assert not reply
		self.reply_handler()

class CancelCall(ActiveCall):
	def __init__(self, reply_handler, error_handler):
		ActiveCall.__init__(self, reply_handler, error_handler)

	def finish(self, reply):
		assert not reply
		self.reply_handler()

class State(object):

	def __init__(self, agent):
		self.agent = agent
		self.released = False
		self.displayed_passkey = (0, 0)
		self._active_call = NoCall()

	@property
	def active_call(self):
		return self._active_call

	@active_call.setter
	def active_call(self, call):
		assert (isinstance(self._active_call, NoCall) or
			isinstance(call, NoCall))
		self._active_call = call
		self.agent.ActiveCallChanged(self._active_call.name())

class Agent(dbus.service.Object):

	def __init__(self, bus, path):
		dbus.service.Object.__init__(self, bus, path)
		self.state = State(self)
		self.capability = "KeyboardDisplay"

		obj = bus.get_object(BUS_NAME, "/org/bluez")
		self.manager = dbus.Interface(obj, "org.bluez.AgentManager1")
		self.manager.RegisterAgent(self.__dbus_object_path__, self.capability)
		self.manager.RequestDefaultAgent(self.__dbus_object_path__)


	#------------------------------------------------------------
	@dbus_service_method(AGENT_INTERFACE,
			     in_signature="", out_signature="")
	def Release(self):
		self.state.released = True

	#------------------------------------------------------------
	@dbus_service_method(AGENT_INTERFACE,
			     in_signature="o", out_signature="s",
			     async_callbacks=('reply_handler', 'error_handler'))
	def RequestPinCode(self, device, reply_handler, error_handler):
		self.state.active_call = RequestPinCodeCall(device,
							    reply_handler,
							    error_handler)

	#------------------------------------------------------------
	@dbus_service_method(AGENT_INTERFACE,
			     in_signature="os", out_signature="",
			     async_callbacks=('reply_handler', 'error_handler'))
	def DisplayPinCode(self, device, pincode, reply_handler,
			   error_handler):
		self.state.active_call = DisplayPinCodeCall(device, pincode,
							    reply_handler,
							    error_handler)

	#------------------------------------------------------------
	@dbus_service_method(AGENT_INTERFACE,
			     in_signature="o", out_signature="u",
			     async_callbacks=('reply_handler', 'error_handler'))
	def RequestPasskey(self, device, reply_handler, error_handler):
		self.state.active_call = RequestPasskeyCall(device,
							    reply_handler,
							    error_handler)

	#------------------------------------------------------------
	@dbus_service_method(AGENT_INTERFACE,
			     in_signature="ouq", out_signature="")
	def DisplayPasskey(self, device, passkey, entered):
		self.state.displayed_passkey = (passkey, entered)

	#------------------------------------------------------------
	@dbus_service_method(AGENT_INTERFACE,
			     in_signature="ou", out_signature="",
			     async_callbacks=('reply_handler', 'error_handler'))
	def RequestConfirmation(self, device, passkey, reply_handler,
			error_handler):
		self.state.active_call = RequestConfirmationCall(device,
								 passkey,
								 reply_handler,
								 error_handler)

	#------------------------------------------------------------
	@dbus_service_method(AGENT_INTERFACE,
			     in_signature="o", out_signature="",
			     async_callbacks=('reply_handler', 'error_handler'))
	def RequestAuthorization(self, device, reply_handler, error_handler):
		self.state.active_call = RequestAuthorizationCall(device,
								  reply_handler,
								  error_handler)

	#------------------------------------------------------------
	@dbus_service_method(AGENT_INTERFACE,
			     in_signature="os", out_signature="",
			     async_callbacks=('reply_handler', 'error_handler'))
	def AuthorizeService(self, device, uuid, reply_handler, error_handler):
		self.state.active_call = AuthorizeServiceCall(device, uuid,
							      reply_handler,
							      error_handler)

	#------------------------------------------------------------
	@dbus_service_method(AGENT_INTERFACE,
			     in_signature="", out_signature="",
			     async_callbacks=('reply_handler', 'error_handler'))
	def Cancel(self, reply_handler, error_handler):
		self.state.active_call = NoCall()
		self.state.displayed_passkey = (0, 0)
		self.state.active_call = CancelCall(reply_handler, error_handler)

	#------------------------------------------------------------
	@dbus_service_method(AGENT_TEST_INTERFACE,
			     in_signature="", out_signature="i")
	def IsReleased(self):
		return self.state.released

	#------------------------------------------------------------
	@dbus_service_method(AGENT_TEST_INTERFACE,
			     in_signature="", out_signature="(ii)")
	def GetDisplayedPasskey(self):
		return self.state.displayed_passkey

	#------------------------------------------------------------
	@dbus_service_method(AGENT_TEST_INTERFACE,
			     in_signature="", out_signature="s")
	def GetActiveCall(self):
		return self.state.active_call.name()

	@dbus_service_signal(AGENT_TEST_INTERFACE,
			     signature="s")
	def ActiveCallChanged(self, active_call):
		pass

	#------------------------------------------------------------
	@dbus_service_method(AGENT_TEST_INTERFACE,
			     in_signature="s", out_signature="")
	def FinishActiveCall(self, reply):
		active_call = self.state.active_call
		self.state.active_call = NoCall()
		active_call.finish(reply)

	#------------------------------------------------------------
	@dbus_service_method(AGENT_TEST_INTERFACE,
			     in_signature="", out_signature="")
	def RejectActiveCall(self):
		active_call = self.state.active_call
		self.state.active_call = NoCall()
		active_call.reject()

	#------------------------------------------------------------
	@dbus_service_method(AGENT_TEST_INTERFACE,
			     in_signature="", out_signature="")
	def CancelActiveCall(self):
		active_call = self.state.active_call
		self.state.active_call = NoCall()
		active_call.cancel()

	#------------------------------------------------------------
	@dbus_service_method(AGENT_TEST_INTERFACE,
			     in_signature="", out_signature="s")
	def GetCapability(self):
		return self.capability

	#------------------------------------------------------------
	@dbus_service_method(AGENT_TEST_INTERFACE,
			     in_signature="s", out_signature="")
	def SetCapability(self, capability):
		self.capability = capability
		self.manager.UnregisterAgent(self.__dbus_object_path__)
		self.manager.RegisterAgent(self.__dbus_object_path__, self.capability)
		self.manager.RequestDefaultAgent(self.__dbus_object_path__)

class CommandReleased:
	'''\
	Test whether the agent was released.

	Prints "true" or "false".

	See org.bluez.Agent1.Release() in bluez5 D-Bus API documentation.
	'''

	def __init__(self, subparsers):
		parser = subparsers.add_parser(
				'released',
				help='Test whether the agent was released',
				formatter_class=argparse.RawDescriptionHelpFormatter,
				description=self.__doc__)
		parser.set_defaults(handler=self)

	def __call__(self, agent, args):
		print(['false', 'true'][agent.IsReleased()])

class CommandActiveCall:
	'''\
	Get active call.

	Prints the name of the active D-Bus call on the org.bluez.Agent1 interface
	(only method name, with the interface part stripped).

	If not active call is waiting, the string "None" is printed.

	To finish a waiting call, see `finish-active-call', `reject-active-call'
	and `cancel-active-call'.
	'''

	def __init__(self, subparsers):
		parser = subparsers.add_parser(
				'active-call',
				help='Get active call',
				formatter_class=argparse.RawDescriptionHelpFormatter,
				description=self.__doc__)
		parser.set_defaults(handler=self)

	def __call__(self, agent, args):
		print(agent.GetActiveCall())

class CommandFinishActiveCall:
	'''\
	Finish active call (also see `active-call').

	Some calls expect result argument. See the API documentation of the
	respective org.bluez.Agent1 methods in bluez5 D-Bus API.
	'''

	def __init__(self, subparsers):
		parser = subparsers.add_parser(
				'finish-active-call',
				help='Finish active call',
				formatter_class=argparse.RawDescriptionHelpFormatter,
				description=self.__doc__)
		parser.add_argument(
				'result', nargs='?', type=str,
				help='Value to return from the active call.')
		parser.set_defaults(handler=self)

	def __call__(self, agent, args):
		agent.FinishActiveCall(args.result)

class CommandRejectActiveCall:
	'''\
	Reject active call (also see `active-call').

	I.e. finish the call by issuing org.bluez.Error.Rejected D-Bus error.

	See the API documentation of the respective org.bluez.Agent1 methods in
	bluez5 D-Bus API for allowed errors.
	'''

	def __init__(self, subparsers):
		parser = subparsers.add_parser(
				'reject-active-call',
				help='Reject active call',
				formatter_class=argparse.RawDescriptionHelpFormatter,
				description=self.__doc__)
		parser.set_defaults(handler=self)

	def __call__(self, agent, args):
		agent.RejectActiveCall()

class CommandCancelActiveCall:
	'''\
	Cancel active call (also see `active-call').

	I.e. finish the call by issuing org.bluez.Error.Canceled D-Bus error.

	See the API documentation of the respective org.bluez.Agent1 methods in
	bluez5 D-Bus API for allowed errors.
	'''

	def __init__(self, subparsers):
		parser = subparsers.add_parser(
				'cancel-active-call',
				help='Cancel active call',
				formatter_class=argparse.RawDescriptionHelpFormatter,
				description=self.__doc__)
		parser.set_defaults(handler=self)

	def __call__(self, agent, args):
		agent.CancelActiveCall()

class CommandDisplayedPasskey:
	'''\
	Get displayed passkey.

	It prints the `passkey' and `entered' arguments separated with single
	space.

	See org.bluez.Agent1.DisplayPasskey() in bluez5 D-Bus API documentation.
	'''

	def __init__(self, subparsers):
		parser = subparsers.add_parser(
				'displayed-passkey',
				help='Get displayed passkey',
				formatter_class=argparse.RawDescriptionHelpFormatter,
				description=self.__doc__)
		parser.set_defaults(handler=self)

	def __call__(self, agent, args):
		print(agent.GetDisplayedPasskey())

class CommandCapability:
	'''\
	Get/Set agent capability.

	With no argument it prints agent's current capability.

	To change agent capability the agent is unregistered and registered again,
	reseting its internal state to initial.

	See org.bluez.Agent1 in bluez5 D-Bus API documentation.
	'''

	def __init__(self, subparsers):
		parser = subparsers.add_parser(
				'capability',
				help='Get/Set agent capability',
				formatter_class=argparse.RawDescriptionHelpFormatter,
				description=self.__doc__)
		parser.add_argument(
				'capability', nargs='?', type=str,
				help='Agent capability')
		parser.set_defaults(handler=self)

	def __call__(self, agent, args):
		if not args.capability:
			print(agent.GetCapability())
		else:
			agent.SetCapability(args.capability)


if __name__ == '__main__':
	dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

	bus = dbus.SystemBus()

	parser = argparse.ArgumentParser(
			prog='btts bluez-agent',
			formatter_class=argparse.RawDescriptionHelpFormatter,
			description='''\
Bluez agent with non-interactive command line user interface.

See org.bluez.Agent1 in bluez5 D-Bus API documentation.

It consists of a background service and a client process providing user
interface. Pass `--server' option to run the background service instead of user
interface.

''')
	subparsers = parser.add_subparsers(
			dest='subcommand', title='subcommands',
			help='''Valid subcommands. Pass "<subcommand> --help" to get
				more help on the given subcommand.''')


	CommandReleased(subparsers)
	CommandActiveCall(subparsers)
	CommandFinishActiveCall(subparsers)
	CommandRejectActiveCall(subparsers)
	CommandCancelActiveCall(subparsers)
	CommandDisplayedPasskey(subparsers)
	CommandCapability(subparsers)

	parser.usage = '%(prog)s --server\n' + parser.format_usage()

	if '--server' in sys.argv:
		if len(sys.argv) > 2:
			parser.error('Unexpected argument')

		mainloop = GObject.MainLoop()

		name = dbus.service.BusName(AGENT_BUS_NAME, bus)
		agent = Agent(bus, AGENT_PATH)
		print("Agent registered")

		# TODO: signal handling
		#signal.signal(signal.SIGINT,
		#		lambda *args: gobject.idle_add(mainloop.quit))
		#signal.signal(signal.SIGTERM,
		#		lambda *args: gobject.idle_add(mainloop.quit))

		mainloop.run()

		#adapter.UnregisterAgent(path)
		#print("Agent unregistered")
	else:
		args = parser.parse_args()
		agent_object = bus.get_object(AGENT_BUS_NAME, AGENT_PATH)
		agent = dbus.Interface(agent_object, AGENT_TEST_INTERFACE)
		args.handler(agent, args)
