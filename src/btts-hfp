#!/usr/bin/python3
#
# BTTS - BlueTooth Test Suite
#
# Copyright (C) 2014 Jolla Ltd.
# Contact: Martin Kampas <martin.kampas@jollamobile.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import dbus
import dbus.mainloop.glib
import sys

import btts
from   btts.cliutils import failure_on, bad_usage_on, error_handler

class CommandEnabled:
    '''\
    Get/Set profile enabled state.

    With no argument it prints "true" or "false" to indicate current state.
    '''

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'enabled',
                help='Get/Set profile enabled state',
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self.__doc__)
        parser.add_argument(
                'enabled', nargs='?', type=btts.cliutils.boolean,
                help='Profile enabled state (true|false)')
        parser.set_defaults(handler=self)

    @failure_on([btts.ProfileManager.Error])
    def __call__(self, args):
        profile_manager = btts.ProfileManager()

        if args.enabled == None:
            state = profile_manager.get_profiles_state()['hfp']
            print(['false', 'true'][state])
        else:
            profile_manager.enable_profile('hfp', args.enabled)

# Main argument parser
main_parser = argparse.ArgumentParser(
        prog='btts hfp',
        description='Hands-Free Profile controlling utility.')
subparsers = main_parser.add_subparsers(
        dest='subcommand', title='subcommands',
        help='''Valid subcommands. Pass "<subcommand> --help" to get more help
            on the given subcommand.''')

CommandEnabled(subparsers)

args = main_parser.parse_args()
if not args.subcommand:
    main_parser.print_usage()
    sys.exit(1)

dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

with error_handler(main_parser):
    args.handler(args)
