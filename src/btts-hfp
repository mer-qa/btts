#!/usr/bin/python3
#
# BTTS - BlueTooth Test Suite
#
# Copyright (C) 2014 Jolla Ltd.
# Contact: Martin Kampas <martin.kampas@jollamobile.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import dbus
import dbus.mainloop.glib
from   gi.repository import GObject
import sys
import textwrap

import btts
from   btts.cliutils import failure_on, bad_usage_on, error_handler
from   btts.utils import dbus_service_method, dbus_service_signal

SAMPLE_MESSAGE = 'BTTS'
SAMPLE_PATH = '/tmp/btts-hfp-sample.wav'
ECHO_PATH = '/tmp/btts-hfp-echo.wav'

SERVER_BUS_NAME = 'org.merproject.btts.HfpTool'
SERVER_PATH = '/org/merproject/btts/HfpTool'
SERVER_INTERFACE = 'org.merproject.btts.HfpTool'

REASONABLE_RECORD_START_PADDING = 5 # seconds

class Server(dbus.service.Object):
    def __init__(self, bus, path):
        dbus.service.Object.__init__(self, bus, path)

    # TODO

class CommandEnabled:
    _doc = textwrap.dedent('''\
    Get/Set profile enabled state.

    With no argument it prints "true" or "false" to indicate current state.
    ''')

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'enabled',
                help=self._doc.splitlines()[0],
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self._doc)
        parser.add_argument(
                'enabled', nargs='?', type=btts.cliutils.boolean,
                help='Profile enabled state (true|false)')
        parser.set_defaults(handler=self)

    @failure_on([btts.Config.Error])
    def __call__(self, server, args):
        config = btts.Config()

        if args.enabled == None:
            state = config.profile_enabled('hfp')
            print(['false', 'true'][state])
        else:
            config.set_profile_enabled('hfp', args.enabled)

class CommandDial:
    _doc = textwrap.dedent('''\
    Initiate a new outgoing call.
    ''')

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'dial',
                help=self._doc.splitlines()[0],
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self._doc)
        parser.add_argument(
                'number', type=str,
                help='Phone number to dial')
        parser.add_argument(
                'hide_callerid', nargs='?', type=btts.cliutils.boolean,
                help='Override default (network) CLIR mode')
        parser.set_defaults(handler=self)

    @failure_on([btts.Config.Error, btts.VoiceCall.Error])
    def __call__(self, server, args):
        voice_call = btts.VoiceCall()

        hide_callerid = { None: 'default',
                          True: 'enabled',
                          False: 'disabled' }[args.hide_callerid]

        voice_call.Dial(args.number, hide_callerid)

class CommandAnswer:
    _doc = textwrap.dedent('''\
    Answer an incomming call.
    ''')

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'answer',
                help=self._doc.splitlines()[0],
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self._doc)
        parser.set_defaults(handler=self)

    @failure_on([btts.Config.Error, btts.VoiceCall.Error])
    def __call__(self, server, args):
        voice_call = btts.VoiceCall()
        voice_call.ReleaseAndAnswer()

class CommandHangup:
    _doc = textwrap.dedent('''\
    Hangup an active call.
    ''')

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'hangup',
                help=self._doc.splitlines()[0],
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self._doc)
        parser.set_defaults(handler=self)

    @failure_on([btts.Config.Error, btts.VoiceCall.Error])
    def __call__(self, server, args):
        voice_call = btts.VoiceCall()
        voice_call.HangupAll()

class CommandReceivingAudio:
    _doc = textwrap.dedent('''\
    Test if receiving audio right now.

    It prints "true" or "false" to indicate current state.
    ''')

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'receiving-audio',
                help=self._doc.splitlines()[0],
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self._doc)
        parser.set_defaults(handler=self)

    @failure_on([btts.Config.Error])
    def __call__(self, server, args):
        print(['false', 'true'][btts.Recorder.receiving_audio()])

class CommandPlayBackAndVerifyEcho:
    _doc = textwrap.dedent('''\
    Play back an audio sample and match it with the echo.

    Assuming the HFP gateway has dialed an "echo service", it starts playing
    back an audio sample -- a signal modulated using the Minimodem tool,
    encoding a text message -- and simultaneously recording the echo.  Recorded
    echo will be decoded and matched against the original text message.

    Prints "true" or "false" to indicate if the recorded echo matches the
    played back sample.

    DEBUGGING:
        The following paths can be examined for debugging purposes:
            - %(sample)s - The original sample
            - %(echo)s - The recorded echo
    ''' % {
            'sample': SAMPLE_PATH,
            'echo': ECHO_PATH,
        })

    def __init__(self, subparsers):
        parser = subparsers.add_parser(
                'play-back-and-verify-echo',
                help=self._doc.splitlines()[0],
                formatter_class=argparse.RawDescriptionHelpFormatter,
                description=self._doc)
        parser.set_defaults(handler=self)

    @failure_on([btts.Player.Error, btts.Recorder.Error])
    def __call__(self, server, args):
        btts.Minimodem.write(SAMPLE_MESSAGE, SAMPLE_PATH)

        player = btts.Player()
        recorder = btts.Recorder()

        recorder.start(ECHO_PATH, 'hfp', duration=0,
                       start_padding=REASONABLE_RECORD_START_PADDING,
                       mono=True)
        player.start(SAMPLE_PATH)
        player.wait()
        recorder.wait()

        message = btts.Minimodem.read(ECHO_PATH)

        print(['false', 'true'][message.strip() == SAMPLE_MESSAGE])

# Main argument parser
description='''\
Hands-Free Profile controlling utility.'''

main_parser = btts.cliutils.ArgumentParser(
        prog='hfp',
        description=description,
        add_server_option=True,
        subcommands=[
                CommandEnabled,
                CommandDial,
                CommandAnswer,
                CommandHangup,
                CommandReceivingAudio,
                CommandPlayBackAndVerifyEcho,
            ])

dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
bus = dbus.SystemBus()

if '--server' in sys.argv:
    if len(sys.argv) > 2:
        main_parser.error('Unexpected argument')

    mainloop = GObject.MainLoop()

    name = dbus.service.BusName(SERVER_BUS_NAME, bus)
    server = Server(bus, SERVER_PATH)

    # TODO: signal handling
    #signal.signal(signal.SIGINT,
    #		lambda *args: gobject.idle_add(mainloop.quit))
    #signal.signal(signal.SIGTERM,
    #		lambda *args: gobject.idle_add(mainloop.quit))

    mainloop.run()
else:
    args = main_parser.parse_args()
    if not args.subcommand:
        main_parser.print_usage()
        sys.exit(1)

    server_object = bus.get_object(SERVER_BUS_NAME, SERVER_PATH)
    server = dbus.Interface(server_object, SERVER_INTERFACE)

    with error_handler(main_parser):
        args.handler(server, args)
